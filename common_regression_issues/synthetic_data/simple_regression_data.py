"""Data simulated to adhere to standard OLS assumptions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/synthetic_data/00_simple_regression_data.ipynb.

# %% auto 0
__all__ = ['generate_ols_data']

# %% ../../nbs/synthetic_data/00_simple_regression_data.ipynb 4
import numpy as np
import pandas as pd
import statsmodels.api as sm
import xarray as xr
from typing import Optional


# %% ../../nbs/synthetic_data/00_simple_regression_data.ipynb 6
def generate_ols_data(
    sample_size: int,
    n_exogenous_vars: int, # Number of variables with a direct effect on the dep var
    n_confounder: int=0, # Number of confounder variables to include
    noise_sigma: float=1.0, # Level of un-explained gaussian noise to add
    random_seed: Optional[int]=None # Random seed for reproducability
) -> xr.Dataset: # Generated Data
    "Generate Simple OLS data"
    
    rng = np.random.default_rng(random_seed)
    data = rng.normal(0, 1, size=(sample_size, n_exogenous_vars))
    var_names = [f'var_{i}' for i in range(n_exogenous_vars)]
    df = pd.DataFrame(data, columns=var_names)
    df["Index"] = np.arange(sample_size)
    df.set_index("Index", inplace=True)
    if n_confounder > 0:
        con_names = [f"con_{i}" for i in range(n_confounder)]
        df[con_names] = rng.normal(0, 1, size=(sample_size, n_confounder))
        betas_confounds = rng.normal(0, .4, size = (n_confounder, n_exogenous_vars))
        df[var_names] = df[var_names].values + df[con_names].values @ betas_confounds
    betas = np.round(rng.normal(0, 2, size=n_exogenous_vars), 3)
    betas_confounds = np.round(rng.normal(0, .4, size=n_confounder), 3)
    alpha = np.round(rng.normal(0, 3), 3)
    dep_var = df[var_names].values @ betas + df[con_names].values @ betas_confounds + alpha + noise_sigma*rng.normal(0, 1, size=sample_size)
    df['depvar'] = dep_var
    dataset = xr.Dataset.from_dataframe(df)
    dataset = dataset.assign_attrs(
        true_betas = {
            name: betas[i] for i, name in enumerate(var_names)
            }| {name: betas_confounds[i] for i, name in enumerate(con_names)},
        true_alpha=alpha
        )

    
    return dataset
